%% See http://yihui.name/knitr/demo/child/ for documentation on the parent/child document system of knitr

\Sexpr{set_parent('NimbleUserManual.Rnw')}

<<echo=FALSE>>=
require(nimble)
@ 

\chapter{Writing \cd{nimbleFunction}s}
\label{cha:progr-with-models}

<<echo=FALSE>>=
read_chunk(file.path('chunks', 'programmingWithModels_chunks.R')) 
@ 



\section{Writing nimbleFunctions}
\label{sec:writ-nimble-funct}

When you write an R function, you say what the input arguments are,
you provide the code for execution, and in that code you give the
returned value\footnote{normally the value of the last
  evaluated code, or the argument to return().}.  Using the
\cd{function} keyword in R triggers the operation of
creating an object that is the function.

Creating nimbleFunctions is similar, but there
are two kinds of code and two steps of execution:

\begin{enumerate}
\item \cd{Setup} code is provided as a regular R function, but the
  programmer does not control what it returns.  Typically the inputs to
  \cd{setup} code are objects like a model, a vector of nodes,
  a modelValues object or modelValuesSpec, or another nimbleFunction.  The \cd{setup} code,
  as its name implies, sets up information for run-time code.  It is
  executed in R, so it can use any aspect of R.
\item \cd{Run} code is provided in the NIMBLE language.  This is
  similar to a narrow subset of R, but it is important to remember
  that it is different -- defined by what can be compiled -- and much more limited.  \cd{Run} code can
  use the objects created by the \cd{setup} code.  In addition,
  some information on variable types must be provided for input
  arguments, the return object, and in some circumstances for local
  variables. There are two
  kinds of \cd{run} code:
  \begin{enumerate}
  \item There is always a primary function, given as an argument
    called \cd{run}\footnote{This can be omitted if you don't need it.}.
  \item There can optionally be other functions, or ``methods'' in the
    language of object-oriented programming, that share the same
    objects created by the \cd{setup} function.
  \end{enumerate}
\end{enumerate}

Here is a small example to fix ideas:

<<nf-intro>>=
@ 

The call to the R function called \cd{nimbleFunction} returns a
function, similarly to defining a function in R. That function,
\cd{logProbCalcPlus}, takes arguments for its \cd{setup} function,
executes it, and returns an object, \cd{logProbCalcPlusA}, that has a
\nm{run} member function (method) accessed by \cd{\$run}.  In this case, the
\cd{setup} function obtains the stochastic dependencies of the
\cd{node} using the \cd{getDependencies} member function of the model
(see \ref{sec:cdgetdependencies}) and stores them in
\cd{dependentNodes}.  In this way, \cd{logProbCalcPlus} can adapt to any
model.  It also creates a variable, \cd{valueToAdd}, that can be used by the nimbleFunction.

The object \cd{logProbCalcPlusA}, returned by \cd{logProbCalcPlus},
is permanently bound to the results of the processed \cd{setup}
function.  In this case, \cd{logProbCalcPlusA\$run} takes a scalar input value, \cd{P},
assigns \cd{P + valueToAdd} to
the given node in the model, and returns the sum of the log
probabilities of that node and its stochastic
dependencies\footnote{Note the use of the global assignment operator
  to assign into the model.  This is necessary for assigning into
  variables from the \cd{setup} function, at least if you want to void
  warnings from R.  These warnings come from R's reference class
  system.}.  We say  \cd{logProbCalcPlusA} is and ``instance'' of
\cd{logProbCalcPlus} that is
``specialized'' or ``bound'' to \cd{a} and \cd{testModel}.  Usually, the
\cd{setup} code will be where information about the model
structure is determined, and then the \cd{run} code can use that
information without repeatedly, redundantly recomputing it.  A nimbleFunction can
be called repeatedly, each time returning a specialized nimbleFunction.
  
Readers familiar with object-oriented programming may find it useful
to think in terms of class definitions and objects.  \cd{nimbleFunction}
creates a class definition.  Each specialized nimbleFunction is one object
in the class.  The setup arguments are used to define member data in
the object.

\section{Using and compiling nimbleFunctions}
\label{sec:using-comp-nimbl}

To compile the nimbleFunction, together with its model, we use \cd{compileNimble}:

<<nf-compiling>>=
@ 

These have been initialized with the values from their uncompiled
versions and can be used in the same way:

<<nf-using>>=
@ 

\subsection{Accessing and modifying numeric values from setup}
\label{sec:access-modify-numer}

While models and nodes created during \cd{setup} cannot be
modified\footnote{Actually, they can be, but only for uncompiled nimbleFunctions},
numeric values and modelValues (see below) can be.  For example:

<<nf-modifyValueToAdd>>=
@ 


\section{\cd{nimbleFunction}s without \cd{setup} code}
\label{sec:comp-numer-oper}

The \cd{setup} function is optional.  If it is omitted, then
\cd{nimbleFunction} is more like \cd{function}: it simply
returns a function that can be executed and compiled.  If there is no
\cd{setup} code, there is no specialization step.  This is useful
for doing math or the other kinds of processing available in NIMBLE
when no model or modelValues is needed.

<<nf-RCfun>>=
@ 

This example shows the textbook calculation of a least squares
solution for regression of 100 data points on 4 explanatory variables,
all generated randomly\footnote{Of course in general, explicitly
  calculating the inverse is not the recommended numerical recipe for
  least squares.}.  Such functions can be called from other
nimbleFunctions or used in BUGS code. \footnote{On the machine this is
  being written on, the compiled version runs a few times faster than
  the uncompiled version.  However we refrain from formal speed tests.}

If one wants a nimbleFunction that does get specialized but has
empty setup code, use \cd{setup = function() \{\}} or \cd{setup = TRUE}.

\section{Useful tools for \cd{setup} functions}

The setup function is typically used to determine information on nodes
in a model, set up any modelValues objects, set up any nimbleFunctions
or nimbleFunctionLists, and set up any persistent numeric objects.
For example, the \cd{setup} code of an MCMC nimbleFunction creates the
nimbleFunctionList of sampler nimbleFunctions.  The values of numeric
objects created in \cd{setup} can be modified by run code and will
persist across calls.

Some of the useful tools and objects to create in \cd{setup} functions include

\begin{description}
\item[vectors of node names] Often these are obtained from the
  \cd{getNodeNames} and \cd{getDependencies} methods of a model,
  described in section \ref{sec:cdgetn-cdgetv}.
\item[modelValues objects] These are discussed more below.
\item[specializations of other nimbleFunctions] A useful NIMBLE
  programming technique is to have one nimbleFunction contain other
  nimbleFunctions, which it can use in its run-time code.
\item[lists of other nimbleFunctions] In addition to containing single
  other nimbleFunctions, a nimbleFunction can contain a list of other
  nimbleFunctions.  These are discussed more below.
\end{description}

\subsection{Control of \cd{setup} outputs }
\label{sec:determ-pers-texttts}

Sometimes \cd{setup} code may create variables that are not used in
run-time code.  By default, NIMBLE inspects run-time code and omits
variables from \cd{setup} that do not appear in run-time code from
compilation.  However, sometimes a programmer may want to force a
numeric or character variable to be created in compilation, even if it
is not used directly in run-time code.  As shown below, such variables
can be directly accessed in one nimbleFunction from another, which
provides a way of using nimbleFunctions as general data structures.
To force NIMBLE to include variables around during compilation, for
example \cd{X} and \cd{Y}, simply include

<<eval = FALSE>>=
setupOutputs(X, Y)
@ 

anywhere in the \cd{setup} code. 

\section{NIMBLE language components}
\label{sec:nimble-lang-comp}

\subsection{Basics}
\label{sec:basics}

There are several general points that will be useful before describing
the NIMBLE language in more detail.
\begin{itemize}
\item NIMBLE language functions are not R functions.  In many cases we
  have used syntax identical or nearly so to R, and in most cases we
  have provided a matching R function, but it is important not to
  confuse the NIMBLE language definition with the behavior of the
  corresponding R function. 
  
\item As in R, function calls in NIMBLE can provide arguments by name
  or in a default order.  

\item Like R, NIMBLE uses 1-based indexing.  For example, the first
  element of a vector \cd{x} is \cd{x[1]}, not \cd{x[0]}.
   
\item To a large extent, NIMBLE functions can be executed in R
  (uncompiled) or can be compiled.  Using them in R will be slow, and
  is intended for testing and debugging algorithm logic.  

\item NIMBLE is the opposite of R for argument passing.  R nearly
  always uses pass-by-value.  NIMBLE nearly always uses
  pass-by-reference (or pointer).  That means that in compiled
  execution only, changing the value of a variable that was a function
  input will change the value in the calling function.  Thus it is
  possible to write a nimbleFunction that returns information by
  modifying an argument.  Yes, that's a big difference in behavior!
  
  Although compiled nimbleFunctions can modify arguments, the R
  interface to a compiled nimbleFunction performs a copy to protect the
  original R argument from modification.  (If you want to see arguments
  -- potentially modified -- as well as any return value from R, you can
  modify the \cd{control} argument to compileNimble to include
  ``\cd{returnAsList = TRUE}''.  Then the returned object will be a
  list with the nimbleFunction's return value as the last element.)

\item BUGS model nodes are implemented as nimbleFunctions with member
  functions for \cd{calculate}, \cd{calculateDiff}, \cd{simulate}, and
  \cd{getLogProb}.  There are also member functions for obtaining
  the value of each parameter or alternative parameters (e.g. rate =
  1/scale).  

\end{itemize}

\subsection{Declaring argument types and the return type}
\label{sec:decl-argum-types}

NIMBLE requires that types of arguments and a return type be
explicitly declared.

The syntax for a type declaration is:
\begin{itemize}
\item \cd{type(nDim, sizes)}
\end{itemize}

\cd{type} can currently take values \cd{double},
\cd{integer}, \cd{character} (for scalars or vectors only) or
\cd{logical} (for scalars only).  In a
\cd{returnType} statement, a type of \cd{void()} is valid, but you
don't need to include that because it is the default if no
\cd{returnType} statement is included.
\cd{nDim} is the number of dimensions, with 0 indicating scalar.
\cd{sizes} is an optional vector of fixed, known sizes.  These
should use R's \cd{c} function if \cd{nDim} $>1$.  If sizes
are omitted, they will either be set when the entire object is
assigned to, or an explicit call to \cd{setSize} is needed.

\subsection{Driving models: \cd{calculate}, \cd{calculateDiff}, \cd{simulate}, and \cd{getLogProb}}
\label{sec:driv-models:-calc}

These four functions are the primary ways to operate a model.  Their
syntax was explained in section \ref{sec:cdcalc-cdsim-cdgetl}. Except
for \cd{getLogProb}, it is usually important for the \cd{nodes}
object to be created in \cd{setup} code such that they are sorted in
topological order.

\subsection{Accessing model and modelValues variables and using \cd{copy}}
\label{sec:access-model-modelv}

The \cd{modelValues} structure was introduced in section
\ref{sec:modelValues-struct}.  Inside nimbleFunctions, modelValues are
designed to easily save values from a model object during the running
of a nimbleFunction. A \cd{modelValues} object used in \cd{run} code
must always exist in the setup code, either by passing it in as a
setup argument or creating it in the setup code.
  
To illustrate this, we will create a nimbleFunction for computing
importance weights for importance sampling. This function will use two
modelValues objects.  \cd{propModelValues} will contain a set of
values simulated from the importance sampling distribution and a field \cd{propLL}
for their log
probabilities (densities).  \cd{savedWeights} will contain the
difference in log probability (density) between the model and the
\cd{propLL} value provided for each set of values.   

<<mv-setup-code>>=
@
  
  The simplest way to pass values back and forth between models and
  modelValues inside of a nimbleFunction is with \cd{copy}, which
  has the synonym \cd{nimCopy}. This takes arguments 
  \begin{description}
  \item[\cd{from}, \cd{to}] which can either be models or modelValues
  \item[\cd{row}, \cd{rowTo}] which refers to the rows of a
    modelValues object, if either \cd{from} or \cd{to} is a
    modelValues. If \cd{rowTo} is omitted, it is assumed to be equal to \cd{row} if necessary.
    \item[\cd{nodes}, \cd{nodesTo}] which is a vector of the names of the nodes
      to be copied.  The node names will be expanded when variable names are provided.  If
      \cd{nodesTo} is omitted it will be set equal to \cd{nodes}.
  \end{description}
  
  TODO: CHECK THESE USAGES
  
  Alternatively, the values may be accessed via indexing of individual
  rows, using the notation \cd{mv[var, i]}, where \cd{mv} is a
  modelValues object, \cd{var} is a variable name (not a node name),
  and \cd{i} is a row number. Likewise, the \cd{getsize} and
  \cd{resize} functions can be used as discussed previously. However the function
  \cd{as.matrix} does not work in \cd{run} code.
  
  Here is a run-time function to use these modelValues:
  
<<mv-run-time>>=
@

Once the nimbleFunction is built, the modelValues object can be accessed
using using \cd{\$}, which is shown in more detail below.  In
fact, since modelValues, like most NIMBLE objects, are reference class
objects, one can get a reference to them before the function is
executed and then use that reference afterwards.
  
<<mv-compilation-example>>=
@

Importance sampling could also be written using simple vectors for the
weights, but we illustrated putting them in a modelValues object along
with model variables.

\subsection{Using model variables and modelValues in expressions}
\label{sec:using-model-variable}

Each way of accessing a variable, node, or modelValues can be used amid mathematical
expressions, including with indexing, or passed to another
nimbleFunction as an argument.  For example, the following two
statements would be valid:

<<eval = FALSE>>=
model[['x[2:8, ]']][2:4, 1:3] %*% Z
@ 
if Z is a vector or matrix, and

<<eval = FALSE>>=
C[6:10] <- mv[v, i][1:5, k] + B
@ 
if B is a vector or matrix.

The NIMBLE language allows scalars, but BUGS models never have purely
scalar nodes.  Instead, a single node such as defined by \cd{z $\sim$
  dnorm(0, 1)} is implemented as a vector of length 1, similar to R.
When using z via \cd{model\$z} or \cd{model[[`z']]}, NIMBLE
will try to do the right thing by treating this as a scalar.  In the
event of problems\footnote{please tell us!}, a more explicit way to
access z is \cd{model\$z[1]} or \cd{model[[`z']][1]}.

\subsection{Getting and setting more than one model node or variable
  at a time using \cd{values}}
\label{sec:getting-setting-more}

Sometimes it is useful to set a collection of nodes or variables at
one time.  For example, one might want a nimbleFunction that will
serve as the objective function for an optimizer.  The input to the
nimbleFunction would be a vector, which should be used to fill a
collection of nodes in the model before calculating their log
probabilities.  NIMBLE has two ways to do this, one of which was set
up during development and may be deprecated in the future.

The recommended newer way is:

<<eval=FALSE>>=
P <- values(model, nodes)
values(model, nodes) <- P
@ 

where the first line would assign the collection of values from nodes
into P, and the second would to the inverse.  In both cases, values
from nodes with 2 or more dimensions are flattened into a vector in
column-wise order.

The older syntax, which may be deprecated in the future, is

<<eval=FALSE>>=
getValues(P, model, nodes)
setValues(P, model, nodes)
@ 

These are equivalent to the two previous lines.  Note that
\cd{getValues} modifies P in the calling environment.

With the new notation, \cd{values(model, nodes)} may appear as a
vector in other expressions, e.g. \cd{Y <- A \%*\% values(model,
  nodes) + b}. 

\subsection{Basic flow control: if-then-else, for, and while}
\label{sec:basic-flow-control}

These basic control flow structures use the same syntax as in R.
However, \cd{for}-loops are limited to sequential integer
indexing.  For example, \cd{for(i in 2:5) \{...\} } works as it does
in R.  Decreasing index sequences are not allowed.  

We plan to include more flexible \cd{for}-loops in the future, but for
now we've included just one additional useful feature:  \cd{for(i in
  seq\_along(NFL))} will work as in R, where \cd{NFL} is a
nimbleFunctionList.  This is described below.

\subsection{How numeric types work}
\label{sec:how-types-work}

Numeric types in NIMBLE are much less flexible than in R, a reflection
of the fact that NIMBLE code can be compiled into C++\footnote{C++ is a
  statically typed language, which means the type of a variable cannot
  change.}.  In NIMBLE, the \textit{type} of a numeric object refers to the number
of dimensions and the numeric type of the elements.  In v\ver, objects
from 0 (scalar) to 4 dimensions are supported, and the numeric types
integer and double are supported. In addition the type logical is
supported for scalars only.  While the number of dimensions
cannot change during run-time, numeric objects can be resized using
\cd{setSize} or by full (non-indexed) assignment.

When possible, NIMBLE will determine the type of a variable for you.
In other cases you must declare the type.  The rules are as follows:

\begin{itemize}
\item For numeric variables from the \cd{setup} function that
  appear in the \cd{run} function or other member functions (or
  are declared in \cd{setupOutputs}): the
  type is determined from the values created by the \cd{setup}
  code. The types created by \cd{setup} code must be
  consistent across all specializations of the nimbleFunction.  For
  example if X is created as a matrix (2-dimensional double) in one
  specialization but as a vector (1-dimensional double) in another, there
  will be a problem during compilation.  The sizes may differ in each specialization.
  
  Treatment of vectors of length 1 presents special challenges because
  they could be treated as scalars or vectors.  Currently they are
  treated as scalars.  If you want a vector, ensure that the length is
  greater than 1 in the setup code and then use \cd{setSize} in the
  run-time code.

\item In \cd{run} code, when a numeric variable is created by
  assignment, its type is determined by that assignment.  Subsequent
  uses of that variable must be consistent with that type. 
  
\item If the first uses of a variable involves indexing, the type must
  be declared explicitly, using \cd{declare}, before using it.  In addition, its size must
  be set before assigning into it.  Sizes can be included in the
  declare() statement, but if so they should not subsequently change.
  If a variable may have its size changed during execution, then the
  declare statement should omit the size argument, and a separate call
  to \cd{setSize} should be used to set the initial size(s).
\end{itemize}

\subsection{Querying and changing sizes}
\label{sec:query-chang-sizes}

Sizes can be queried as follows:
\begin{itemize}
\item \cd{length} behaves like R's \cd{length} function.  It
  returns the \textit{entire} length of X.  That means if X is
  multivariate, \cd{length} returns the product of the sizes in
  each dimension.
\item \cd{dim}, which has synonym \cd{nimDim}, behaves like R's
  \cd{dim} function for matrices or arrays, and like R's
  \cd{length} function for vectors.  In other words, regardless of
  whether the number of dimensions is 1 or more, it returns a vector
  of the sizes.  Using \cd{dim} vs. \cd{nimDim} is a personal choice,
  but if you use \cd{dim}, you use it you should keep in mind that
  it behaves differently from R's \cd{dim}.
  \begin{itemize}
  \item A quirky limitation in v\ver: It not currently possible to
    assign the results from \cd{nimDim} to another object using
    vector assignment.  So the only practical way to use
    \cd{nimDim} is to extract elements immediately, such as
    \cd{nimDim(X)[1]}, \cd{nimDim(X)[2]}, etc.
  \end{itemize}
\end{itemize}

Sizes can be changed using:
\begin{itemize}
\item setSize(X, sizes)
\end{itemize}
where \cd{sizes} is a scalar if \cd{X} is 1-dimensional and uses R's \cd{c()}
function to provide a vector of sizes if X is more than 1-dimensional.

\subsection{Basic math and linear algebra}
\label{sec:basic-math-linear}

NIMBLE uses the \nm{Eigen} library in C++ to accomplish linear algebra.  In
v\ver, we use a lot of Eigen's capabilities, but not all of them.  The
supported operations are given in tables \ref{table:functions}-\ref{table:functions-matrix}.

No vectorized operations other than assignment are supported for more
than two dimensions in
v\ver.  That means \cd{A = B + C} will work only if B and C have dimensions
$\le$ 2.

\subsubsection{Managing dimensions and sizes: asRow, asCol, and dropping dimensions}
\label{sec:manag-dimens-sizes}

It can be tricky to determine the dimensions returned by a linear
algebra expression.  As much as possible, NIMBLE behaves like R, but
in some cases this is not possible because R uses run-time information
while NIMBLE must determine dimensions at compile-time.

Suppose v1 and v2 are vectors, and M1 is a matrix.  Then

\begin{itemize}
\item  \cd{v1 + M1} generates a compilation error unless one dimension of
M1 is known at compile-time to be 1.  If so, then v1 is promoted to a
1-row or 1-column matrix to conform with M1, and the result is a
matrix of the same sizes.  This behavior occurs for
all component-wise binary functions.

\item \cd{ v1 \%*\% M1} defaults to promoting v1 to a 1-row matrix,
  unless it is known at compile-time that M1 has 1 row, in which case
  v1 is promoted to a 1-column matrix.

\item \cd{ M1 \%*\% v1} defaults to promoting v1 to a 1-column matrix,
unless it is known at compile time that M1 has 1 column, in which case
v1 is promoted to a 1-row matrix.

\item \cd{ v1 \%*\% v2} promotes v1 to a 1-row matrix and v2 to a
1-column matrix, so the returned values is a 1x1 matrix with the inner
product of v1 and v2.

\item \cd{asRow(v1)} explicitly promotes v1 to a 1-row matrix.
  Therefore \cd{v1 \%*\% asRow(v2)} gives the outer product of
  v1 and v2.
  
\item \cd{asCol(v1)} explicitly promotes v1 to a 1-column matrix.  
  
\item The default promotion for a vector is to a 1-column matrix.
  Therefore, \cd{v1 \%*\% t(v2)} is equivalent to \cd{v1 \%*\% asRow(v2)} .

\item When indexing, dimensions with scalar indices will be dropped.
  For example, \cd{M1[1,]} and \cd{M1[,1]} are both vectors.
  
\item The left-hand side of an assignment can use indexing, but if so
  it must already be correctly sized for the result.  For example,
  \cd{Y[5:10, 20:30] <- model\$x} will not work -- and could crash
  your R session with a segmentation fault --  if Y is not
  already at least 10x30 in size.
  
\end{itemize}

Here are some examples to illustrate the above points, assuming M2 is
a square matrix.

\begin{itemize}
\item \cd{Y <- v1 + M2 \%*\% v2} will
  return a 1-column matrix.  If Y is created by this statement, it
  will be a 2-dimensional variable.  If Y already exists, it must
  already be 2-dimesional, and it will be automatically re-sized for
  the result.
\item \cd{Y <- v1 + (M2 \%*\% v2)[,1]} will return a vector.  Y
  will either be created as a vector or must already exist as a vector
  and will be re-sized for the result.
\end{itemize}

\subsubsection{Size warnings and the potential for crashes}
\label{sec:size-warn-potent}

For matrix algebra, NIMBLE cannot ensure perfect behavior because
sizes are not known until run-time.  Therefore, it is possible for you
to write code that will crash your R session.  In v\ver, NIMBLE
attempts to issue warning if sizes are not compatible, but it does not
halt execution.  Therefore, if you execute \cd{A <- M1 \% * \%
  M2}, and M1 and M2 are not compatible for matrix multiplication,
NIMBLE will output a warning that the number of rows of M1 does not
match the number of columns of M2.  After that warning the statement
will be executed and may result in a crash.  Another easy way to write
code that will crash is to do things like \cd{Y[5:10, 20:30] <-
  model\$x} without ensuring Y is at least 10x30.  In the future we hope to
prevent crashes, but in v\ver\ we limit ourselves to trying to provide
useful information.

\subsection{Including other methods in a nimbleFunction}
\label{sec:incl-other-meth}

Other methods can be included with the \cd{methods} argument to
\cd{nimbleFunction}.  These methods can use the objects created in
\cd{setup} code in just the same ways as the \cd{run} function.  In
fact, the \cd{run} function is just a default main method name.

<<usingMemberFunctions>>=
@ 

\subsection{Using other nimbleFunctions}
\label{sec:using-other-nimbl}

One nimbleFunction can use another nimbleFunction that was passed to
it as a setup argument or was created in the setup function.  This can
be an effective way to program.  When a nimbleFunction needs to
access a setup variable or method of another nimbleFunction, use
\cd{\$}. 

TODO: DEMONSTRATE DIRECT ACCESS to sharedValues in this demo

<<owningMemberFunctions>>=
@ 

Note that the output from the \cd{print} calls in the compiled
function match those from the uncompiled function when run in an R
session.  It is not shown here because this document is created with
\cd{knitr} and for some reason output printed from C++ does not make it into
\cd{knitr} output.

\subsection{Virtual nimbleFunctions and nimbleFunctionLists}
\label{sec:virt-nimbl-nimbl}

Often it is useful for one nimbleFunction to have a list of other
nimbleFunctions that have methods with the same arguments and return
types.  For example, NIMBLE's MCMC contains a list of samplers that
are each nimbleFunctions.

To make such a list, NIMBLE provides a way to declare the arguments
and return types of methods: virtual nimbleFunctions created by
\cd{nimbleFunctionVirtual}.  Other nimbleFunctions can inherit from
virtual nimbleFunctions, which in R is called ``containing'' them.
Readers familiar with object oriented programming will recognize this
as a simple class inheritance system.  In v\ver\ it is limited to
simple, single-level inheritance.

Here is how it works:

<<nimbleFunctionLists>>=
@ 


As in R, the
\cd{seq\_along} function is equivalent to
\cd{1:length(nimFunList)} if \cd{length(nimFunList)} $>$ 0, and
it is an empty sequence if \cd{length(nimFunList)} == 0.

Currently \cd{seq\_along} works only for nimbleFunctionLists.

Virtual nimbleFunctions cannot define \cd{setup} values to be inherited.

\subsection{print and stop}
\label{sec:print}

As demonstrated above, the NIMBLE function \cd{print}, or equivalently
\cd{nimPrint}, prints an arbitrary set of outputs in order.  The
NIMBLE function \cd{stop}, or equivalently \cd{nimStop}, throws
control to R's error-handling system and can take one string
(character) argument.

\subsection{Character objects}

NIMBLE provides limited uses of character objects in \cd{code}.
Character vectors created in \cd{setup} code will be available in
\cd{run} code, but the only thing you can really do with them is
include them in a \cd{print} or \cd{stop} statement.  

Note that character vectors of model node and variable names are
completely different.  For example, in \cd{model[[node]]}, \cd{node}
may be a character object, and the NIMBLE compiler processes this
differently than \cd{print(``The node name was '', node)}.  In the
former, the NIMBLE compiler sets up a C++ pointer directly to the
\cd{node} in the \cd{model}, so that the character content of
\cd{node} is never needed in C++.  In the latter, \cd{node} is used as
a C++ string and therefore is needed in C++.

\subsection{Alternative keywords for some functions}
\label{sec:altern-keyw-some}

NIMBLE uses some keywords, such as \cd{dim} and \cd{print}, in ways
similar but not identical to R. In addition, there are some keywords
in NIMBLE that have the same names as really different R functions.
For example, \cd{step} is part of the BUGS language, but it is also an
R function for stepwise model selection.  And \cd{equals} is part of
the BUGS language but is also used in the \cd{testthat} package, which
we use in testing NIMBLE.

The way NIMBLE handles this to try to avoid conflicts is to replace
some keywords immediately upon creating a nimbleFunction.  These
replacements include
\begin{itemize}
\item \cd{copy} $\rightarrow$ \cd{nimCopy}
\item \cd{dim}  $\rightarrow$ \cd{nimDim}
\item \cd{print} $\rightarrow$ \cd{nimPrint}
\item \cd{step} $\rightarrow$ \cd{nimStep}
\item \cd{equals} $\rightarrow$ \cd{nimEquals}
\item \cd{round} $\rightarrow$ \cd{nimRound}
\item \cd{stop} $\rightarrow$ \cd{nimStop}
\end{itemize}

This system gives programmers the choice between using the keywords like
\cd{nimPrint} directly, to avoid confusion in their own code about
which ``print'' is being used, or to use the more intuitive keywords
like \cd{print} but remember that they are not the same as R's functions.

\subsection{User-defined data structures}
\label{sec:user-defined-data}

NIMBLE does not explicitly have user-defined data structures, but one
can use nimbleFunctions to achieve a similar effect.  To do so, one
can define setup code with whatever variables are wanted and ensure
they are compiled using \cd{setupOutputs}.  Here is an example:

TODO: FIX THIS EXAMPLE

%<<dataStructures>>=
%@ 

You'll notice that 
\begin{itemize}
\item after execution of the compiled function, access to
the \cd{X}, \cd{Y}, and \cd{Z} is not yet quite the same as for the
uncompiled case.  
\item We need to take care that at the time of compilation, the
  \cd{X}, \cd{Y} and \cd{Z} values contains doubles via
  \cd{as.numeric} so that they are not compiled as integer objects.
\item The \cd{myDataNF} could be created in the setup code.  We just
  provided it as a setup argument to illustrate that option.
\end{itemize}

\subsection{Distribution functions}
\label{sec:nimble-dist-funs}

IN PROGRESS

Distribution ``d'', ``r'', ``p'', and ``q'' functions can all be used
from nimbleFunctions, but the care is needed in the syntax. 

with the name of the 
distribution and the parameterization. We support only the canonical
NIMBLE parameterization, as listed below. Also note that the names of the distributions are the names used under the hood in NIMBLE and differ from the BUGS names.

Currently ``r'' functions only return one random
draw at a time, and the first argument must always be 1.  For
multivariate distribution functions the \cd{prec\_param} or
\cd{scale\_param} argument must be provided, indicating when a
covariance or precision matrix has been given.  In a future release, we will also extend the
alternative parameterizations given in Section X to \cd{nimbleFunctions}.


the order of
arguments.  For distributions available in R, nimbleFunction
parameterizations match those of R, \textit{which may differ in
  default order from the same-named BUGS distributions}.  You can
provide named arguments to be safe.  For distributions available in
BUGS but not R, nimbleFunctions currently support the default BUGS
parameterization but not alternatives.

Supported distributions include (TODO: IS THIS UP TO DATE? SHOULD WE
INCLUDE ALTERNATIVE ARGUMENT NAMES?):
\begin{itemize}
\item \cd{dbinom(size, prob)}
\item \cd{dcat(prob)}
\item \cd{dmulti(size, prob)}
\item \cd{dnbinom(prob, size)}
\item \cd{dpois(lambda)}
\item \cd{dbeta(shape1, shape2)}
\item \cd{dchisq(df)}
\item \cd{dexp(rate)}
\item \cd{dgamma(shape, scale)}
\item \cd{dlnorm(meanlog, sdlog)}
\item \cd{dlogis(location, scale)}
\item \cd{dnorm(mean, sd)}
 \item \cd{dt\_nonstandard(df, mu, sigma)}
 \item \cd{dweibull(shape, scale)}
  \item \cd{ddirch(alpha)}
  \item \cd{dmnorm\_chol(mean, chol, prec\_param)}
  \item \cd{dwish\_chol(chol, df, scale\_param)}
\end{itemize}

In the last two, chol stands for Cholesky decomposition; 
prec\_param indicates whether the Cholesky is of a precision matrix or covariance
matrix; and scale\_param indicates whether the Cholesky is of a scale
matrix or an inverse scale matrix.

In addition, user-defined distributions can also be used in nimbleFunctions.

TODO: THIS SEEMS REDUNDANT: Arguments to the distributions will be matched by either position, or if named, by name. If omitted, default argument values based on the standard R distribution functions will be used. User-supplied distributions are handled analogously with regard to matching by position and  use of defaults (when provided via the nimbleFunction run-time arguments) (Section \ref{sec:user-defined}).

Note that when calling the ``r'' function, \cd{n} must be 1 and must be included.

\subsection{rankSample}
\label{sec:ranksample}

TODO:  Need to write.

\subsection{DSL vectors and arrays}
\label{sec:vectors-and-arrays}

TODO: FILL THIS IN

DSL functions: nimVector(), nimArray().

Can use in run function:

nimVector(value, length)

nimArray(value, nrow, ncol)

